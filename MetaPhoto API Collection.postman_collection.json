{
	"info": {
		"_postman_id": "397e0602-bda3-4dc5-bd12-f92671664b7e",
		"name": "MetaPhoto API Collection",
		"description": "Postman collection for testing MetaPhoto API endpoints including health check, enriched photo retrieval, filtering, and pagination.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1006850"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains status 'ok'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"ok\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/health",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Enriched Photo by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains required enriched photo properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('title');",
							"    pm.expect(jsonData).to.have.property('url');",
							"    pm.expect(jsonData).to.have.property('thumbnailUrl');",
							"    pm.expect(jsonData).to.have.property('album');",
							"    pm.expect(jsonData.album).to.have.property('id');",
							"    pm.expect(jsonData.album).to.have.property('title');",
							"    pm.expect(jsonData.album).to.have.property('user');",
							"    pm.expect(jsonData.album.user).to.have.property('id');",
							"    pm.expect(jsonData.album.user).to.have.property('name');",
							"    pm.expect(jsonData.album.user).to.have.property('username');",
							"    pm.expect(jsonData.album.user).to.have.property('email');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/externalapi/photos/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"externalapi",
						"photos",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Enriched Photos with Title Filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array and each item has title containing 'repudiandae iusto'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    jsonData.forEach(function(item) {",
							"        pm.expect(item.title.toLowerCase()).to.include('repudiandae iusto');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/externalapi/photos?title=repudiandae iusto",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"externalapi",
						"photos"
					],
					"query": [
						{
							"key": "title",
							"value": "repudiandae iusto"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Enriched Photos with Album Title Filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array and each item has album.title containing 'quidem'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    jsonData.forEach(function(item) {",
							"        pm.expect(item.album.title.toLowerCase()).to.include('quidem');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/externalapi/photos?album.title=quidem",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"externalapi",
						"photos"
					],
					"query": [
						{
							"key": "album.title",
							"value": "quidem"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Enriched Photos with Album User Email Filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array and each item has album.user.email exactly 'sincere@april.biz'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    jsonData.forEach(function(item) {",
							"        pm.expect(item.album.user.email.toLowerCase()).to.eql('sincere@april.biz');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/externalapi/photos?album.user.email=Sincere@april.biz",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"externalapi",
						"photos"
					],
					"query": [
						{
							"key": "album.user.email",
							"value": "Sincere@april.biz"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Enriched Photos with Combined Filters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array and each item matches both filters\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    jsonData.forEach(function(item) {",
							"        pm.expect(item.title.toLowerCase()).to.include('repudiandae iusto');",
							"        pm.expect(item.album.title.toLowerCase()).to.include('quidem');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/externalapi/photos?album.title=quidem&title=repudiandae iusto",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"externalapi",
						"photos"
					],
					"query": [
						{
							"key": "album.title",
							"value": "quidem"
						},
						{
							"key": "title",
							"value": "repudiandae iusto"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Enriched Photos with Pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array with maximum 10 items\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData.length).to.be.at.most(10);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/externalapi/photos?album.title=quidem&limit=10&offset=50",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"externalapi",
						"photos"
					],
					"query": [
						{
							"key": "album.title",
							"value": "quidem"
						},
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "50"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000"
		}
	]
}